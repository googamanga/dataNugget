var ClientSideDataModel = Backbone.Model.extend({
  //raw_csv_data
  defaults: {
    'normalizedObject': [],
    'specializedData': [],
    'normalizedCsvData': "",
    'trainerMessage': null,
    'trainerError': null,
    'results': null,
    'metaHash': {
      target: undefined,
      nameIndexHash: {},
      sampleRate: 0.1,
      count: null,
      colNameArray: [],
      trainer: {
        parameters: {
          iterations: 1000,
          errorThresh: 0.00001,
          callbackPeriod: 100
        }
      }
    },
    'raw_csv_data': "FCTNO,VLTY,TIME,STRIKE,OPRICE\n"+
      "1,0.2,5,75,25\n"+
      "2,0.2,5,76,24\n"+
      "3,0.2,5,77,23\n"+
      "4,0.2,5,78,22\n"+
      "5,0.2,5,79,21\n"+
      "6,0.2,5,80,20\n"+
      "7,0.2,5,81,19\n"+
      "8,0.2,5,82,18\n"+
      "9,0.2,5,83,17\n"+
      "10,0.2,5,84,16\n"+
      "11,0.2,5,85,15\n"+
      "12,0.2,5,86,14\n"+
      "13,0.2,5,87,13\n"+
      "14,0.2,5,88,12\n"+
      "15,0.2,5,89,11\n"+
      "16,0.2,5,90,10.0001\n"+
      "17,0.2,5,91,9.0003\n"+
      "18,0.2,5,92,8.0012\n"+
      "19,0.2,5,93,7.0043\n"+
      "20,0.2,5,94,6.0135\n"+
      "21,0.2,5,95,5.0372\n"+
      "22,0.2,5,96,4.0908\n"+
      "23,0.2,5,97,3.1976\n"+
      "24,0.2,5,98,2.387\n"+
      "25,0.2,5,99,1.6886\n"+
      "26,0.2,5,100,1.1239\n"+
      "27,0.2,5,101,0.6992\n"+
      "28,0.2,5,102,0.4045\n"+
      "29,0.2,5,103,0.2167\n"+
      "30,0.2,5,104,0.1072\n"+
      "31,0.2,5,105,0.0488\n"+
      "32,0.2,5,106,0.0205\n"+
      "33,0.2,5,107,0.0079\n"+
      "34,0.2,5,108,0.0028\n"+
      "35,0.2,5,109,0.0009\n"+
      "36,0.2,5,110,0.0003\n"+
      "37,0.2,5,111,0.0001\n"+
      "38,0.2,5,112,0\n"+
      "39,0.2,5,113,0\n"+
      "40,0.2,5,114,0\n"+
      "41,0.2,5,115,0\n"+
      "42,0.2,5,116,0\n"+
      "43,0.2,5,117,0\n"+
      "44,0.2,5,118,0\n"+
      "45,0.2,5,119,0\n"+
      "46,0.2,5,120,0\n"+
      "47,0.2,5,121,0\n"+
      "48,0.2,5,122,0\n"+
      "49,0.2,5,123,0\n"+
      "50,0.2,5,124,0\n"+
      "51,0.2,5,125,0\n"+
      "52,0.2,10,75,25\n"+
      "53,0.2,10,76,24\n"+
      "54,0.2,10,77,23\n"+
      "55,0.2,10,78,22\n"+
      "56,0.2,10,79,21\n"+
      "57,0.2,10,80,20\n"+
      "58,0.2,10,81,19\n"+
      "59,0.2,10,82,18\n"+
      "60,0.2,10,83,17\n"+
      "61,0.2,10,84,16\n"+
      "62,0.2,10,85,15\n"+
      "63,0.2,10,86,14.0001\n"+
      "64,0.2,10,87,13.0002\n"+
      "65,0.2,10,88,12.0007\n"+
      "66,0.2,10,89,11.0019\n"+
      "67,0.2,10,90,10.0048\n"+
      "68,0.2,10,91,9.0114\n"+
      "69,0.2,10,92,8.0252\n"+
      "70,0.2,10,93,7.0519\n"+
      "71,0.2,10,94,6.1002\n"+
      "72,0.2,10,95,5.1815\n"+
      "73,0.2,10,96,4.3102\n"+
      "74,0.2,10,97,3.5018\n"+
      "75,0.2,10,98,2.7715\n"+
      "76,0.2,10,99,2.1314\n"+
      "77,0.2,10,100,1.5893\n"+
      "78,0.2,10,101,1.1468\n"+
      "79,0.2,10,102,0.7995\n"+
      "80,0.2,10,103,0.5377\n"+
      "81,0.2,10,104,0.3486\n"+
      "82,0.2,10,105,0.2177\n"+
      "83,0.2,10,106,0.1308\n"+
      "84,0.2,10,107,0.0757\n"+
      "85,0.2,10,108,0.0421\n"+
      "86,0.2,10,109,0.0226\n"+
      "87,0.2,10,110,0.0116\n"+
      "88,0.2,10,111,0.0058\n"+
      "89,0.2,10,112,0.0028\n"+
      "90,0.2,10,113,0.0013\n"+
      "91,0.2,10,114,0.0006\n"+
      "92,0.2,10,115,0.0002\n"+
      "93,0.2,10,116,0.0001\n"+
      "94,0.2,10,117,0\n"+
      "95,0.2,10,118,0\n"+
      "96,0.2,10,119,0\n"+
      "97,0.2,10,120,0\n"+
      "98,0.2,10,121,0\n"+
      "99,0.2,10,122,0\n"+
      "100,0.2,10,123,0\n"+
      "101,0.2,10,124,0\n"+
      "102,0.2,10,125,0\n"+
      "103,0.2,15,75,25\n"+
      "104,0.2,15,76,24\n"+
      "105,0.2,15,77,23\n"+
      "106,0.2,15,78,22\n"+
      "107,0.2,15,79,21\n"+
      "108,0.2,15,80,20\n"+
      "109,0.2,15,81,19\n"+
      "110,0.2,15,82,18\n"+
      "111,0.2,15,83,17.0001\n"+
      "112,0.2,15,84,16.0002\n"+
      "113,0.2,15,85,15.0005\n"+
      "114,0.2,15,86,14.0012\n"+
      "115,0.2,15,87,13.0029\n"+
      "116,0.2,15,88,12.0063\n"+
      "117,0.2,15,89,11.013\n"+
      "118,0.2,15,90,10.0254\n"+
      "119,0.2,15,91,9.0472\n"+
      "120,0.2,15,92,8.0838\n"+
      "121,0.2,15,93,7.1419\n"+
      "122,0.2,15,94,6.2304\n"+
      "123,0.2,15,95,5.359\n"+
      "124,0.2,15,96,4.5384\n"+
      "125,0.2,15,97,3.779\n"+
      "126,0.2,15,98,3.0898\n"+
      "127,0.2,15,99,2.4776\n"+
      "128,0.2,15,100,1.9465\n"+
      "129,0.2,15,101,1.4967\n"+
      "130,0.2,15,102,1.1256\n"+
      "131,0.2,15,103,0.8273\n"+
      "132,0.2,15,104,0.5941\n"+
      "133,0.2,15,105,0.4166\n"+
      "134,0.2,15,106,0.2852\n"+
      "135,0.2,15,107,0.1906\n"+
      "136,0.2,15,108,0.1243\n"+
      "137,0.2,15,109,0.0791\n"+
      "138,0.2,15,110,0.0492\n"+
      "139,0.2,15,111,0.0299\n"+
      "140,0.2,15,112,0.0177\n"+
      "141,0.2,15,113,0.0102\n"+
      "142,0.2,15,114,0.0058\n"+
      "143,0.2,15,115,0.0032\n"+
      "144,0.2,15,116,0.0017\n"+
      "145,0.2,15,117,0.0009\n"+
      "146,0.2,15,118,0.0005\n"+
      "147,0.2,15,119,0.0002\n"+
      "148,0.2,15,120,0.0001\n"+
      "149,0.2,15,121,0.0001\n"+
      "150,0.2,15,122,0\n"+
      "151,0.2,15,123,0\n"+
      "152,0.2,15,124,0\n"+
      "153,0.2,15,125,0\n"+
      "154,0.4,5,75,25\n"+
      "155,0.4,5,76,24\n"+
      "156,0.4,5,77,23\n"+
      "157,0.4,5,78,22\n"+
      "158,0.4,5,79,21\n"+
      "159,0.4,5,80,20\n"+
      "160,0.4,5,81,19.0001\n"+
      "161,0.4,5,82,18.0003\n"+
      "162,0.4,5,83,17.0006\n"+
      "163,0.4,5,84,16.0014\n"+
      "164,0.4,5,85,15.003\n"+
      "165,0.4,5,86,14.006\n"+
      "166,0.4,5,87,13.0115\n"+
      "167,0.4,5,88,12.0212\n"+
      "168,0.4,5,89,11.0375\n"+
      "169,0.4,5,90,10.0638\n"+
      "170,0.4,5,91,9.1047\n"+
      "171,0.4,5,92,8.1657\n"+
      "172,0.4,5,93,7.2537\n"+
      "173,0.4,5,94,6.3761\n"+
      "174,0.4,5,95,5.541\n"+
      "175,0.4,5,96,4.7564\n"+
      "176,0.4,5,97,4.0295\n"+
      "177,0.4,5,98,3.3665\n"+
      "178,0.4,5,99,2.7717\n"+
      "179,0.4,5,100,2.2475\n"+
      "180,0.4,5,101,1.7938\n"+
      "181,0.4,5,102,1.4087\n"+
      "182,0.4,5,103,1.088\n"+
      "183,0.4,5,104,0.8262\n"+
      "184,0.4,5,105,0.6168\n"+
      "185,0.4,5,106,0.4526\n"+
      "186,0.4,5,107,0.3263\n"+
      "187,0.4,5,108,0.2313\n"+
      "188,0.4,5,109,0.1611\n"+
      "189,0.4,5,110,0.1103\n"+
      "190,0.4,5,111,0.0742\n"+
      "191,0.4,5,112,0.0491\n"+
      "192,0.4,5,113,0.0319\n"+
      "193,0.4,5,114,0.0204\n"+
      "194,0.4,5,115,0.0129\n"+
      "195,0.4,5,116,0.008\n"+
      "196,0.4,5,117,0.0048\n"+
      "197,0.4,5,118,0.0029\n"+
      "198,0.4,5,119,0.0017\n"+
      "199,0.4,5,120,0.001\n"+
      "200,0.4,5,121,0.0006\n"+
      "201,0.4,5,122,0.0003\n"+
      "202,0.4,5,123,0.0002\n"+
      "203,0.4,5,124,0.0001\n"+
      "204,0.4,5,125,0.0001\n"+
      "205,0.4,10,75,25.0003\n"+
      "206,0.4,10,76,24.0005\n"+
      "207,0.4,10,77,23.001\n"+
      "208,0.4,10,78,22.0018\n"+
      "209,0.4,10,79,21.0031\n"+
      "210,0.4,10,80,20.0054\n"+
      "211,0.4,10,81,19.0091\n"+
      "212,0.4,10,82,18.0149\n"+
      "213,0.4,10,83,17.0237\n"+
      "214,0.4,10,84,16.0369\n"+
      "215,0.4,10,85,15.056\n"+
      "216,0.4,10,86,14.0832\n"+
      "217,0.4,10,87,13.1208\n"+
      "218,0.4,10,88,12.1719\n"+
      "219,0.4,10,89,11.2397\n"+
      "220,0.4,10,90,10.328\n"+
      "221,0.4,10,91,9.4408\n"+
      "222,0.4,10,92,8.5821\n"+
      "223,0.4,10,93,7.7563\n"+
      "224,0.4,10,94,6.9672\n"+
      "225,0.4,10,95,6.2188\n"+
      "226,0.4,10,96,5.5142\n"+
      "227,0.4,10,97,4.8562\n"+
      "228,0.4,10,98,4.2468\n"+
      "229,0.4,10,99,3.6872\n"+
      "230,0.4,10,100,3.178\n"+
      "231,0.4,10,101,2.7187\n"+
      "232,0.4,10,102,2.3083\n"+
      "233,0.4,10,103,1.945\n"+
      "234,0.4,10,104,1.6262\n"+
      "235,0.4,10,105,1.3493\n"+
      "236,0.4,10,106,1.1108\n"+
      "237,0.4,10,107,0.9074\n"+
      "238,0.4,10,108,0.7356\n"+
      "239,0.4,10,109,0.5917\n"+
      "240,0.4,10,110,0.4723\n"+
      "241,0.4,10,111,0.3742\n"+
      "242,0.4,10,112,0.2942\n"+
      "243,0.4,10,113,0.2296\n"+
      "244,0.4,10,114,0.1778\n"+
      "245,0.4,10,115,0.1368\n"+
      "246,0.4,10,116,0.1044\n"+
      "247,0.4,10,117,0.0791\n"+
      "248,0.4,10,118,0.0596\n"+
      "249,0.4,10,119,0.0445\n"+
      "250,0.4,10,120,0.0331\n"+
      "251,0.4,10,121,0.0244\n"+
      "252,0.4,10,122,0.0179\n"+
      "253,0.4,10,123,0.013\n"+
      "254,0.4,10,124,0.0094\n"+
      "255,0.4,10,125,0.0068\n"+
      "256,0.4,15,75,25.0039\n"+
      "257,0.4,15,76,24.0062\n"+
      "258,0.4,15,77,23.0097\n"+
      "259,0.4,15,78,22.0149\n"+
      "260,0.4,15,79,21.0225\n"+
      "261,0.4,15,80,20.0332\n"+
      "262,0.4,15,81,19.0481\n"+
      "263,0.4,15,82,18.0685\n"+
      "264,0.4,15,83,17.0958\n"+
      "265,0.4,15,84,16.1319\n"+
      "266,0.4,15,85,15.1788\n"+
      "267,0.4,15,86,14.2387\n"+
      "268,0.4,15,87,13.3141\n"+
      "269,0.4,15,88,12.4078\n"+
      "270,0.4,15,89,11.5224\n"+
      "271,0.4,15,90,10.6608\n"+
      "272,0.4,15,91,9.8259\n"+
      "273,0.4,15,92,9.0205\n"+
      "274,0.4,15,93,8.2472\n"+
      "275,0.4,15,94,7.5084\n"+
      "276,0.4,15,95,6.8063\n"+
      "277,0.4,15,96,6.1425\n"+
      "278,0.4,15,97,5.5184\n"+
      "279,0.4,15,98,4.935\n"+
      "280,0.4,15,99,4.3928\n"+
      "281,0.4,15,100,3.8917\n"+
      "282,0.4,15,101,3.4315\n"+
      "283,0.4,15,102,3.0112\n"+
      "284,0.4,15,103,2.6298\n"+
      "285,0.4,15,104,2.2856\n"+
      "286,0.4,15,105,1.9769\n"+
      "287,0.4,15,106,1.7017\n"+
      "288,0.4,15,107,1.4578\n"+
      "289,0.4,15,108,1.2429\n"+
      "290,0.4,15,109,1.0547\n"+
      "291,0.4,15,110,0.8907\n"+
      "292,0.4,15,111,0.7487\n"+
      "293,0.4,15,112,0.6265\n"+
      "294,0.4,15,113,0.5218\n"+
      "295,0.4,15,114,0.4326\n"+
      "296,0.4,15,115,0.3571\n"+
      "297,0.4,15,116,0.2934\n"+
      "298,0.4,15,117,0.2401\n"+
      "299,0.4,15,118,0.1956\n"+
      "300,0.4,15,119,0.1587\n"+
      "301,0.4,15,120,0.1282\n"+
      "302,0.4,15,121,0.1031\n"+
      "303,0.4,15,122,0.0826\n"+
      "304,0.4,15,123,0.0659\n"+
      "305,0.4,15,124,0.0524\n"+
      "306,0.4,15,125,0.0415\n"+
      "307,0.6,5,75,25.0006\n"+
      "308,0.6,5,76,24.0011\n"+
      "309,0.6,5,77,23.002\n"+
      "310,0.6,5,78,22.0035\n"+
      "311,0.6,5,79,21.0059\n"+
      "312,0.6,5,80,20.0097\n"+
      "313,0.6,5,81,19.0156\n"+
      "314,0.6,5,82,18.0243\n"+
      "315,0.6,5,83,17.0371\n"+
      "316,0.6,5,84,16.0554\n"+
      "317,0.6,5,85,15.0811\n"+
      "318,0.6,5,86,14.1162\n"+
      "319,0.6,5,87,13.1634\n"+
      "320,0.6,5,88,12.2256\n"+
      "321,0.6,5,89,11.3061\n"+
      "322,0.6,5,90,10.4082\n"+
      "323,0.6,5,91,9.5357\n"+
      "324,0.6,5,92,8.6924\n"+
      "325,0.6,5,93,7.882\n"+
      "326,0.6,5,94,7.1078\n"+
      "327,0.6,5,95,6.3732\n"+
      "328,0.6,5,96,5.681\n"+
      "329,0.6,5,97,5.0333\n"+
      "330,0.6,5,98,4.4318\n"+
      "331,0.6,5,99,3.8775\n"+
      "332,0.6,5,100,3.3707\n"+
      "333,0.6,5,101,2.911\n"+
      "334,0.6,5,102,2.4973\n"+
      "335,0.6,5,103,2.1282\n"+
      "336,0.6,5,104,1.8015\n"+
      "337,0.6,5,105,1.5147\n"+
      "338,0.6,5,106,1.265\n"+
      "339,0.6,5,107,1.0493\n"+
      "340,0.6,5,108,0.8646\n"+
      "341,0.6,5,109,0.7076\n"+
      "342,0.6,5,110,0.5753\n"+
      "343,0.6,5,111,0.4646\n"+
      "344,0.6,5,112,0.3728\n"+
      "345,0.6,5,113,0.2972\n"+
      "346,0.6,5,114,0.2354\n"+
      "347,0.6,5,115,0.1853\n"+
      "348,0.6,5,116,0.1449\n"+
      "349,0.6,5,117,0.1126\n"+
      "350,0.6,5,118,0.087\n"+
      "351,0.6,5,119,0.0668\n"+
      "352,0.6,5,120,0.051\n"+
      "353,0.6,5,121,0.0387\n"+
      "354,0.6,5,122,0.0292\n"+
      "355,0.6,5,123,0.0219\n"+
      "356,0.6,5,124,0.0164\n"+
      "357,0.6,5,125,0.0121\n"+
      "358,0.6,10,75,25.0275\n"+
      "359,0.6,10,76,24.0385\n"+
      "360,0.6,10,77,23.0531\n"+
      "361,0.6,10,78,22.0723\n"+
      "362,0.6,10,79,21.097\n"+
      "363,0.6,10,80,20.1285\n"+
      "364,0.6,10,81,19.1682\n"+
      "365,0.6,10,82,18.2176\n"+
      "366,0.6,10,83,17.2783\n"+
      "367,0.6,10,84,16.352\n"+
      "368,0.6,10,85,15.4407\n"+
      "369,0.6,10,86,14.5463\n"+
      "370,0.6,10,87,13.6707\n"+
      "371,0.6,10,88,12.8159\n"+
      "372,0.6,10,89,11.9839\n"+
      "373,0.6,10,90,11.1766\n"+
      "374,0.6,10,91,10.3957\n"+
      "375,0.6,10,92,9.643\n"+
      "376,0.6,10,93,8.9198\n"+
      "377,0.6,10,94,8.2275\n"+
      "378,0.6,10,95,7.5671\n"+
      "379,0.6,10,96,6.9395\n"+
      "380,0.6,10,97,6.3454\n"+
      "381,0.6,10,98,5.7849\n"+
      "382,0.6,10,99,5.2583\n"+
      "383,0.6,10,100,4.7655\n"+
      "384,0.6,10,101,4.3058\n"+
      "385,0.6,10,102,3.8789\n"+
      "386,0.6,10,103,3.4839\n"+
      "387,0.6,10,104,3.1198\n"+
      "388,0.6,10,105,2.7854\n"+
      "389,0.6,10,106,2.4795\n"+
      "390,0.6,10,107,2.2007\n"+
      "391,0.6,10,108,1.9476\n"+
      "392,0.6,10,109,1.7186\n"+
      "393,0.6,10,110,1.5121\n"+
      "394,0.6,10,111,1.3267\n"+
      "395,0.6,10,112,1.1608\n"+
      "396,0.6,10,113,1.0127\n"+
      "397,0.6,10,114,0.8811\n"+
      "398,0.6,10,115,0.7646\n"+
      "399,0.6,10,116,0.6617\n"+
      "400,0.6,10,117,0.5711\n"+
      "401,0.6,10,118,0.4916\n"+
      "402,0.6,10,119,0.4221\n"+
      "403,0.6,10,120,0.3616\n"+
      "404,0.6,10,121,0.3089\n"+
      "405,0.6,10,122,0.2633\n"+
      "406,0.6,10,123,0.2238\n"+
      "407,0.6,10,124,0.1899\n"+
      "408,0.6,10,125,0.1607\n"+
      "409,0.6,15,75,25.1178\n"+
      "410,0.6,15,76,24.1503\n"+
      "411,0.6,15,77,23.1898\n"+
      "412,0.6,15,78,22.2375\n"+
      "413,0.6,15,79,21.2946\n"+
      "414,0.6,15,80,20.3622\n"+
      "415,0.6,15,81,19.4417\n"+
      "416,0.6,15,82,18.5345\n"+
      "417,0.6,15,83,17.6419\n"+
      "418,0.6,15,84,16.7652\n"+
      "419,0.6,15,85,15.9059\n"+
      "420,0.6,15,86,15.0654\n"+
      "421,0.6,15,87,14.2449\n"+
      "422,0.6,15,88,13.4457\n"+
      "423,0.6,15,89,12.6689\n"+
      "424,0.6,15,90,11.9158\n"+
      "425,0.6,15,91,11.1872\n"+
      "426,0.6,15,92,10.484\n"+
      "427,0.6,15,93,9.807\n"+
      "428,0.6,15,94,9.1568\n"+
      "429,0.6,15,95,8.5338\n"+
      "430,0.6,15,96,7.9385\n"+
      "431,0.6,15,97,7.3709\n"+
      "432,0.6,15,98,6.8312\n"+
      "433,0.6,15,99,6.3192\n"+
      "434,0.6,15,100,5.8347\n"+
      "435,0.6,15,101,5.3774\n"+
      "436,0.6,15,102,4.9468\n"+
      "437,0.6,15,103,4.5423\n"+
      "438,0.6,15,104,4.1633\n"+
      "439,0.6,15,105,3.8091\n"+
      "440,0.6,15,106,3.4787\n"+
      "441,0.6,15,107,3.1713\n"+
      "442,0.6,15,108,2.886\n"+
      "443,0.6,15,109,2.6217\n"+
      "444,0.6,15,110,2.3776\n"+
      "445,0.6,15,111,2.1525\n"+
      "446,0.6,15,112,1.9454\n"+
      "447,0.6,15,113,1.7554\n"+
      "448,0.6,15,114,1.5813\n"+
      "449,0.6,15,115,1.4221\n"+
      "450,0.6,15,116,1.277\n"+
      "451,0.6,15,117,1.1448\n"+
      "452,0.6,15,118,1.0248\n"+
      "453,0.6,15,119,0.9159\n"+
      "454,0.6,15,120,0.8174\n"+
      "455,0.6,15,121,0.7284\n"+
      "456,0.6,15,122,0.6481\n"+
      "457,0.6,15,123,0.5759\n"+
      "458,0.6,15,124,0.511\n"+
      "459,0.6,15,125,0.4528\n"+
      "460,0.8,5,75,25.0166\n"+
      "461,0.8,5,76,24.024\n"+
      "462,0.8,5,77,23.0342\n"+
      "463,0.8,5,78,22.0479\n"+
      "464,0.8,5,79,21.0662\n"+
      "465,0.8,5,80,20.0901\n"+
      "466,0.8,5,81,19.121\n"+
      "467,0.8,5,82,18.1604\n"+
      "468,0.8,5,83,17.2098\n"+
      "469,0.8,5,84,16.2712\n"+
      "470,0.8,5,85,15.3465\n"+
      "471,0.8,5,86,14.4377\n"+
      "472,0.8,5,87,13.547\n"+
      "473,0.8,5,88,12.6767\n"+
      "474,0.8,5,89,11.8288\n"+
      "475,0.8,5,90,11.0055\n"+
      "476,0.8,5,91,10.209\n"+
      "477,0.8,5,92,9.4412\n"+
      "478,0.8,5,93,8.7038\n"+
      "479,0.8,5,94,7.9985\n"+
      "480,0.8,5,95,7.3264\n"+
      "481,0.8,5,96,6.6888\n"+
      "482,0.8,5,97,6.0863\n"+
      "483,0.8,5,98,5.5195\n"+
      "484,0.8,5,99,4.9885\n"+
      "485,0.8,5,100,4.4932\n"+
      "486,0.8,5,101,4.0332\n"+
      "487,0.8,5,102,3.6079\n"+
      "488,0.8,5,103,3.2164\n"+
      "489,0.8,5,104,2.8575\n"+
      "490,0.8,5,105,2.53\n"+
      "491,0.8,5,106,2.2324\n"+
      "492,0.8,5,107,1.9631\n"+
      "493,0.8,5,108,1.7205\n"+
      "494,0.8,5,109,1.5028\n"+
      "495,0.8,5,110,1.3083\n"+
      "496,0.8,5,111,1.1353\n"+
      "497,0.8,5,112,0.9819\n"+
      "498,0.8,5,113,0.8465\n"+
      "499,0.8,5,114,0.7274\n"+
      "500,0.8,5,115,0.6232\n"+
      "501,0.8,5,116,0.5322\n"+
      "502,0.8,5,117,0.4531\n"+
      "503,0.8,5,118,0.3846\n"+
      "504,0.8,5,119,0.3255\n"+
      "505,0.8,5,120,0.2747\n"+
      "506,0.8,5,121,0.2311\n"+
      "507,0.8,5,122,0.1939\n"+
      "508,0.8,5,123,0.1622\n"+
      "509,0.8,5,124,0.1354\n"+
      "510,0.8,5,125,0.1126\n"+
      "511,0.8,10,75,25.194\n"+
      "512,0.8,10,76,24.2401\n"+
      "513,0.8,10,77,23.2949\n"+
      "514,0.8,10,78,22.3592\n"+
      "515,0.8,10,79,21.4343\n"+
      "516,0.8,10,80,20.5212\n"+
      "517,0.8,10,81,19.6213\n"+
      "518,0.8,10,82,18.7357\n"+
      "519,0.8,10,83,17.8655\n"+
      "520,0.8,10,84,17.012\n"+
      "521,0.8,10,85,16.1763\n"+
      "522,0.8,10,86,15.3595\n"+
      "523,0.8,10,87,14.5627\n"+
      "524,0.8,10,88,13.7869\n"+
      "525,0.8,10,89,13.033\n"+
      "526,0.8,10,90,12.3019\n"+
      "527,0.8,10,91,11.5942\n"+
      "528,0.8,10,92,10.9106\n"+
      "529,0.8,10,93,10.2517\n"+
      "530,0.8,10,94,9.6179\n"+
      "531,0.8,10,95,9.0094\n"+
      "532,0.8,10,96,8.4266\n"+
      "533,0.8,10,97,7.8694\n"+
      "534,0.8,10,98,7.3378\n"+
      "535,0.8,10,99,6.8318\n"+
      "536,0.8,10,100,6.351\n"+
      "537,0.8,10,101,5.8951\n"+
      "538,0.8,10,102,5.4638\n"+
      "539,0.8,10,103,5.0566\n"+
      "540,0.8,10,104,4.6727\n"+
      "541,0.8,10,105,4.3118\n"+
      "542,0.8,10,106,3.9729\n"+
      "543,0.8,10,107,3.6554\n"+
      "544,0.8,10,108,3.3585\n"+
      "545,0.8,10,109,3.0814\n"+
      "546,0.8,10,110,2.8233\n"+
      "547,0.8,10,111,2.5832\n"+
      "548,0.8,10,112,2.3604\n"+
      "549,0.8,10,113,2.1539\n"+
      "550,0.8,10,114,1.9629\n"+
      "551,0.8,10,115,1.7865\n"+
      "552,0.8,10,116,1.6238\n"+
      "553,0.8,10,117,1.4742\n"+
      "554,0.8,10,118,1.3366\n"+
      "555,0.8,10,119,1.2105\n"+
      "556,0.8,10,120,1.0949\n"+
      "557,0.8,10,121,0.9892\n"+
      "558,0.8,10,122,0.8926\n"+
      "559,0.8,10,123,0.8046\n"+
      "560,0.8,10,124,0.7245\n"+
      "561,0.8,10,125,0.6516\n"+
      "562,0.8,15,75,25.5238\n"+
      "563,0.8,15,76,24.6136\n"+
      "564,0.8,15,77,23.7148\n"+
      "565,0.8,15,78,22.8283\n"+
      "566,0.8,15,79,21.9549\n"+
      "567,0.8,15,80,21.0955\n"+
      "568,0.8,15,81,20.2509\n"+
      "569,0.8,15,82,19.4218\n"+
      "570,0.8,15,83,18.6091\n"+
      "571,0.8,15,84,17.8135\n"+
      "572,0.8,15,85,17.0355\n"+
      "573,0.8,15,86,16.276\n"+
      "574,0.8,15,87,15.5353\n"+
      "575,0.8,15,88,14.8141\n"+
      "576,0.8,15,89,14.1127\n"+
      "577,0.8,15,90,13.4316\n"+
      "578,0.8,15,91,12.7712\n"+
      "579,0.8,15,92,12.1315\n"+
      "580,0.8,15,93,11.5129\n"+
      "581,0.8,15,94,10.9154\n"+
      "582,0.8,15,95,10.3392\n"+
      "583,0.8,15,96,9.7842\n"+
      "584,0.8,15,97,9.2503\n"+
      "585,0.8,15,98,8.7375\n"+
      "586,0.8,15,99,8.2456\n"+
      "587,0.8,15,100,7.7742\n"+
      "588,0.8,15,101,7.3232\n"+
      "589,0.8,15,102,6.8922\n"+
      "590,0.8,15,103,6.4808\n"+
      "591,0.8,15,104,6.0887\n"+
      "592,0.8,15,105,5.7154\n"+
      "593,0.8,15,106,5.3604\n"+
      "594,0.8,15,107,5.0232\n"+
      "595,0.8,15,108,4.7034\n"+
      "596,0.8,15,109,4.4003\n"+
      "597,0.8,15,110,4.1134\n"+
      "598,0.8,15,111,3.8421\n"+
      "599,0.8,15,112,3.586\n"+
      "600,0.8,15,113,3.3443\n"+
      "601,0.8,15,114,3.1166\n"+
      "602,0.8,15,115,2.9022\n"+
      "603,0.8,15,116,2.7005\n"+
      "604,0.8,15,117,2.5111\n"+
      "605,0.8,15,118,2.3333\n"+
      "606,0.8,15,119,2.1665\n"+
      "607,0.8,15,120,2.0104\n"+
      "608,0.8,15,121,1.8642\n"+
      "609,0.8,15,122,1.7275\n"+
      "610,0.8,15,123,1.5997\n"+
      "611,0.8,15,124,1.4805\n"+
      "612,0.8,15,125,1.3693\n"+
      "613,1,5,75,25.0922\n"+
      "614,1,5,76,24.1194\n"+
      "615,1,5,77,23.153\n"+
      "616,1,5,78,22.194\n"+
      "617,1,5,79,21.2437\n"+
      "618,1,5,80,20.3034\n"+
      "619,1,5,81,19.3743\n"+
      "620,1,5,82,18.4579\n"+
      "621,1,5,83,17.5555\n"+
      "622,1,5,84,16.6688\n"+
      "623,1,5,85,15.7991\n"+
      "624,1,5,86,14.9479\n"+
      "625,1,5,87,14.1167\n"+
      "626,1,5,88,13.3069\n"+
      "627,1,5,89,12.5197\n"+
      "628,1,5,90,11.7564\n"+
      "629,1,5,91,11.0181\n"+
      "630,1,5,92,10.3058\n"+
      "631,1,5,93,9.6204\n"+
      "632,1,5,94,8.9625\n"+
      "633,1,5,95,8.3328\n"+
      "634,1,5,96,7.7316\n"+
      "635,1,5,97,7.1592\n"+
      "636,1,5,98,6.6156\n"+
      "637,1,5,99,6.1009\n"+
      "638,1,5,100,5.6148\n"+
      "639,1,5,101,5.1569\n"+
      "640,1,5,102,4.7268\n"+
      "641,1,5,103,4.3238\n"+
      "642,1,5,104,3.9473\n"+
      "643,1,5,105,3.5964\n"+
      "644,1,5,106,3.2702\n"+
      "645,1,5,107,2.9677\n"+
      "646,1,5,108,2.688\n"+
      "647,1,5,109,2.43\n"+
      "648,1,5,110,2.1926\n"+
      "649,1,5,111,1.9746\n"+
      "650,1,5,112,1.775\n"+
      "651,1,5,113,1.5926\n"+
      "652,1,5,114,1.4264\n"+
      "653,1,5,115,1.2753\n"+
      "654,1,5,116,1.1381\n"+
      "655,1,5,117,1.014\n"+
      "656,1,5,118,0.9018\n"+
      "657,1,5,119,0.8007\n"+
      "658,1,5,120,0.7098\n"+
      "659,1,5,121,0.6281\n"+
      "660,1,5,122,0.555\n"+
      "661,1,5,123,0.4896\n"+
      "662,1,5,124,0.4312\n"+
      "663,1,5,125,0.3792\n"+
      "664,1,10,75,25.5715\n"+
      "665,1,10,76,24.6664\n"+
      "666,1,10,77,23.773\n"+
      "667,1,10,78,22.8921\n"+
      "668,1,10,79,22.0244\n"+
      "669,1,10,80,21.1708\n"+
      "670,1,10,81,20.3321\n"+
      "671,1,10,82,19.509\n"+
      "672,1,10,83,18.7023\n"+
      "673,1,10,84,17.9125\n"+
      "674,1,10,85,17.1404\n"+
      "675,1,10,86,16.3866\n"+
      "676,1,10,87,15.6514\n"+
      "677,1,10,88,14.9356\n"+
      "678,1,10,89,14.2393\n"+
      "679,1,10,90,13.5631\n"+
      "680,1,10,91,12.9071\n"+
      "681,1,10,92,12.2717\n"+
      "682,1,10,93,11.6569\n"+
      "683,1,10,94,11.0629\n"+
      "684,1,10,95,10.4898\n"+
      "685,1,10,96,9.9374\n"+
      "686,1,10,97,9.4058\n"+
      "687,1,10,98,8.8949\n"+
      "688,1,10,99,8.4044\n"+
      "689,1,10,100,7.934\n"+
      "690,1,10,101,7.4836\n"+
      "691,1,10,102,7.0528\n"+
      "692,1,10,103,6.6412\n"+
      "693,1,10,104,6.2485\n"+
      "694,1,10,105,5.8742\n"+
      "695,1,10,106,5.5179\n"+
      "696,1,10,107,5.1791\n"+
      "697,1,10,108,4.8572\n"+
      "698,1,10,109,4.5519\n"+
      "699,1,10,110,4.2625\n"+
      "700,1,10,111,3.9885\n"+
      "701,1,10,112,3.7293\n"+
      "702,1,10,113,3.4845\n"+
      "703,1,10,114,3.2534\n"+
      "704,1,10,115,3.0355\n"+
      "705,1,10,116,2.8302\n"+
      "706,1,10,117,2.637\n"+
      "707,1,10,118,2.4553\n"+
      "708,1,10,119,2.2847\n"+
      "709,1,10,120,2.1245\n"+
      "710,1,10,121,1.9743\n"+
      "711,1,10,122,1.8336\n"+
      "712,1,10,123,1.7019\n"+
      "713,1,10,124,1.5787\n"+
      "714,1,10,125,1.4635\n"+
      "715,1,15,75,26.2308\n"+
      "716,1,15,76,25.3824\n"+
      "717,1,15,77,24.5469\n"+
      "718,1,15,78,23.725\n"+
      "719,1,15,79,22.9171\n"+
      "720,1,15,80,22.1237\n"+
      "721,1,15,81,21.3453\n"+
      "722,1,15,82,20.5821\n"+
      "723,1,15,83,19.8347\n"+
      "724,1,15,84,19.1033\n"+
      "725,1,15,85,18.3882\n"+
      "726,1,15,86,17.6897\n"+
      "727,1,15,87,17.008\n"+
      "728,1,15,88,16.3433\n"+
      "729,1,15,89,15.6958\n"+
      "730,1,15,90,15.0655\n"+
      "731,1,15,91,14.4525\n"+
      "732,1,15,92,13.8568\n"+
      "733,1,15,93,13.2785\n"+
      "734,1,15,94,12.7175\n"+
      "735,1,15,95,12.1737\n"+
      "736,1,15,96,11.6471\n"+
      "737,1,15,97,11.1375\n"+
      "738,1,15,98,10.6448\n"+
      "739,1,15,99,10.1687\n"+
      "740,1,15,100,9.7091\n"+
      "741,1,15,101,9.2657\n"+
      "742,1,15,102,8.8383\n"+
      "743,1,15,103,8.4266\n"+
      "744,1,15,104,8.0303\n"+
      "745,1,15,105,7.6491\n"+
      "746,1,15,106,7.2827\n"+
      "747,1,15,107,6.9308\n"+
      "748,1,15,108,6.593\n"+
      "749,1,15,109,6.2689\n"+
      "750,1,15,110,5.9582\n"+
      "751,1,15,111,5.6606\n"+
      "752,1,15,112,5.3756\n"+
      "753,1,15,113,5.1029\n"+
      "754,1,15,114,4.8421\n"+
      "755,1,15,115,4.5929\n"+
      "756,1,15,116,4.3549\n"+
      "757,1,15,117,4.1276\n"+
      "758,1,15,118,3.9108\n"+
      "759,1,15,119,3.704\n"+
      "760,1,15,120,3.5069\n"+
      "761,1,15,121,3.3192\n"+
      "762,1,15,122,3.1404\n"+
      "763,1,15,123,2.9703\n"+
      "764,1,15,124,2.8085\n"+
      "765,1,15,125,2.6547\n"+
      "766,1.2,5,75,25.2657\n"+
      "767,1.2,5,76,24.323\n"+
      "768,1.2,5,77,23.3899\n"+
      "769,1.2,5,78,22.4672\n"+
      "770,1.2,5,79,21.5561\n"+
      "771,1.2,5,80,20.6577\n"+
      "772,1.2,5,81,19.7731\n"+
      "773,1.2,5,82,18.9033\n"+
      "774,1.2,5,83,18.0494\n"+
      "775,1.2,5,84,17.2124\n"+
      "776,1.2,5,85,16.3933\n"+
      "777,1.2,5,86,15.5932\n"+
      "778,1.2,5,87,14.8129\n"+
      "779,1.2,5,88,14.0531\n"+
      "780,1.2,5,89,13.3148\n"+
      "781,1.2,5,90,12.5986\n"+
      "782,1.2,5,91,11.9051\n"+
      "783,1.2,5,92,11.2347\n"+
      "784,1.2,5,93,10.5879\n"+
      "785,1.2,5,94,9.965\n"+
      "786,1.2,5,95,9.3662\n"+
      "787,1.2,5,96,8.7917\n"+
      "788,1.2,5,97,8.2415\n"+
      "789,1.2,5,98,7.7154\n"+
      "790,1.2,5,99,7.2135\n"+
      "791,1.2,5,100,6.7353\n"+
      "792,1.2,5,101,6.2807\n"+
      "793,1.2,5,102,5.8492\n"+
      "794,1.2,5,103,5.4404\n"+
      "795,1.2,5,104,5.0537\n"+
      "796,1.2,5,105,4.6886\n"+
      "797,1.2,5,106,4.3445\n"+
      "798,1.2,5,107,4.0206\n"+
      "799,1.2,5,108,3.7164\n"+
      "800,1.2,5,109,3.4311\n"+
      "801,1.2,5,110,3.1639\n"+
      "802,1.2,5,111,2.9141\n"+
      "803,1.2,5,112,2.6809\n"+
      "804,1.2,5,113,2.4635\n"+
      "805,1.2,5,114,2.2613\n"+
      "806,1.2,5,115,2.0733\n"+
      "807,1.2,5,116,1.8989\n"+
      "808,1.2,5,117,1.7373\n"+
      "809,1.2,5,118,1.5878\n"+
      "810,1.2,5,119,1.4496\n"+
      "811,1.2,5,120,1.3221\n"+
      "812,1.2,5,121,1.2046\n"+
      "813,1.2,5,122,1.0965\n"+
      "814,1.2,5,123,0.9971\n"+
      "815,1.2,5,124,0.9058\n"+
      "816,1.2,5,125,0.8222\n"+
      "817,1.2,10,75,26.1477\n"+
      "818,1.2,10,76,25.2931\n"+
      "819,1.2,10,77,24.4516\n"+
      "820,1.2,10,78,23.6235\n"+
      "821,1.2,10,79,22.8094\n"+
      "822,1.2,10,80,22.0098\n"+
      "823,1.2,10,81,21.2252\n"+
      "824,1.2,10,82,20.456\n"+
      "825,1.2,10,83,19.7026\n"+
      "826,1.2,10,84,18.9654\n"+
      "827,1.2,10,85,18.2447\n"+
      "828,1.2,10,86,17.5407\n"+
      "829,1.2,10,87,16.8538\n"+
      "830,1.2,10,88,16.1841\n"+
      "831,1.2,10,89,15.5318\n"+
      "832,1.2,10,90,14.8971\n"+
      "833,1.2,10,91,14.2799\n"+
      "834,1.2,10,92,13.6804\n"+
      "835,1.2,10,93,13.0985\n"+
      "836,1.2,10,94,12.5343\n"+
      "837,1.2,10,95,11.9877\n"+
      "838,1.2,10,96,11.4585\n"+
      "839,1.2,10,97,10.9468\n"+
      "840,1.2,10,98,10.4522\n"+
      "841,1.2,10,99,9.9747\n"+
      "842,1.2,10,100,9.5139\n"+
      "843,1.2,10,101,9.0697\n"+
      "844,1.2,10,102,8.6418\n"+
      "845,1.2,10,103,8.23\n"+
      "846,1.2,10,104,7.8338\n"+
      "847,1.2,10,105,7.4531\n"+
      "848,1.2,10,106,7.0875\n"+
      "849,1.2,10,107,6.7366\n"+
      "850,1.2,10,108,6.4001\n"+
      "851,1.2,10,109,6.0776\n"+
      "852,1.2,10,110,5.7688\n"+
      "853,1.2,10,111,5.4732\n"+
      "854,1.2,10,112,5.1905\n"+
      "855,1.2,10,113,4.9203\n"+
      "856,1.2,10,114,4.6622\n"+
      "857,1.2,10,115,4.4158\n"+
      "858,1.2,10,116,4.1808\n"+
      "859,1.2,10,117,3.9567\n"+
      "860,1.2,10,118,3.7431\n"+
      "861,1.2,10,119,3.5397\n"+
      "862,1.2,10,120,3.3461\n"+
      "863,1.2,10,121,3.1619\n"+
      "864,1.2,10,122,2.9868\n"+
      "865,1.2,10,123,2.8204\n"+
      "866,1.2,10,124,2.6623\n"+
      "867,1.2,10,125,2.5122\n"+
      "868,1.2,15,75,27.1686\n"+
      "869,1.2,15,76,26.3765\n"+
      "870,1.2,15,77,25.5976\n"+
      "871,1.2,15,78,24.8321\n"+
      "872,1.2,15,79,24.0802\n"+
      "873,1.2,15,80,23.3422\n"+
      "874,1.2,15,81,22.6183\n"+
      "875,1.2,15,82,21.9087\n"+
      "876,1.2,15,83,21.2135\n"+
      "877,1.2,15,84,20.5328\n"+
      "878,1.2,15,85,19.8668\n"+
      "879,1.2,15,86,19.2156\n"+
      "880,1.2,15,87,18.5791\n"+
      "881,1.2,15,88,17.9575\n"+
      "882,1.2,15,89,17.3508\n"+
      "883,1.2,15,90,16.7588\n"+
      "884,1.2,15,91,16.1817\n"+
      "885,1.2,15,92,15.6193\n"+
      "886,1.2,15,93,15.0715\n"+
      "887,1.2,15,94,14.5384\n"+
      "888,1.2,15,95,14.0197\n"+
      "889,1.2,15,96,13.5154\n"+
      "890,1.2,15,97,13.0252\n"+
      "891,1.2,15,98,12.5491\n"+
      "892,1.2,15,99,12.0868\n"+
      "893,1.2,15,100,11.6383\n"+
      "894,1.2,15,101,11.2032\n"+
      "895,1.2,15,102,10.7813\n"+
      "896,1.2,15,103,10.3726\n"+
      "897,1.2,15,104,9.9766\n"+
      "898,1.2,15,105,9.5933\n"+
      "899,1.2,15,106,9.2223\n"+
      "900,1.2,15,107,8.8634\n"+
      "901,1.2,15,108,8.5164\n"+
      "902,1.2,15,109,8.181\n"+
      "903,1.2,15,110,7.8569\n"+
      "904,1.2,15,111,7.5439\n"+
      "905,1.2,15,112,7.2417\n"+
      "906,1.2,15,113,6.9501\n"+
      "907,1.2,15,114,6.6688\n"+
      "908,1.2,15,115,6.3975\n"+
      "909,1.2,15,116,6.1359\n"+
      "910,1.2,15,117,5.8838\n"+
      "911,1.2,15,118,5.641\n"+
      "912,1.2,15,119,5.4071\n"+
      "913,1.2,15,120,5.1819\n"+
      "914,1.2,15,121,4.9652\n"+
      "915,1.2,15,122,4.7567\n"+
      "916,1.2,15,123,4.5561\n"+
      "917,1.2,15,124,4.3632\n"+
      "918,1.2,15,125,4.1778\n"+
      "919,1.4,5,75,25.5475\n"+
      "920,1.4,5,76,24.6399\n"+
      "921,1.4,5,77,23.7438\n"+
      "922,1.4,5,78,22.8601\n"+
      "923,1.4,5,79,21.9896\n"+
      "924,1.4,5,80,21.1331\n"+
      "925,1.4,5,81,20.2915\n"+
      "926,1.4,5,82,19.4654\n"+
      "927,1.4,5,83,18.6557\n"+
      "928,1.4,5,84,17.863\n"+
      "929,1.4,5,85,17.0881\n"+
      "930,1.4,5,86,16.3314\n"+
      "931,1.4,5,87,15.5935\n"+
      "932,1.4,5,88,14.875\n"+
      "933,1.4,5,89,14.1762\n"+
      "934,1.4,5,90,13.4976\n"+
      "935,1.4,5,91,12.8394\n"+
      "936,1.4,5,92,12.2019\n"+
      "937,1.4,5,93,11.5852\n"+
      "938,1.4,5,94,10.9895\n"+
      "939,1.4,5,95,10.4148\n"+
      "940,1.4,5,96,9.8612\n"+
      "941,1.4,5,97,9.3285\n"+
      "942,1.4,5,98,8.8166\n"+
      "943,1.4,5,99,8.3254\n"+
      "944,1.4,5,100,7.8545\n"+
      "945,1.4,5,101,7.4038\n"+
      "946,1.4,5,102,6.9729\n"+
      "947,1.4,5,103,6.5614\n"+
      "948,1.4,5,104,6.169\n"+
      "949,1.4,5,105,5.7952\n"+
      "950,1.4,5,106,5.4395\n"+
      "951,1.4,5,107,5.1015\n"+
      "952,1.4,5,108,4.7806\n"+
      "953,1.4,5,109,4.4764\n"+
      "954,1.4,5,110,4.1882\n"+
      "955,1.4,5,111,3.9156\n"+
      "956,1.4,5,112,3.6579\n"+
      "957,1.4,5,113,3.4146\n"+
      "958,1.4,5,114,3.1852\n"+
      "959,1.4,5,115,2.969\n"+
      "960,1.4,5,116,2.7655\n"+
      "961,1.4,5,117,2.5741\n"+
      "962,1.4,5,118,2.3944\n"+
      "963,1.4,5,119,2.2257\n"+
      "964,1.4,5,120,2.0675\n"+
      "965,1.4,5,121,1.9193\n"+
      "966,1.4,5,122,1.7805\n"+
      "967,1.4,5,123,1.6508\n"+
      "968,1.4,5,124,1.5296\n"+
      "969,1.4,5,125,1.4164\n"+
      "970,1.4,10,75,26.8825\n"+
      "971,1.4,10,76,26.0751\n"+
      "972,1.4,10,77,25.281\n"+
      "973,1.4,10,78,24.5003\n"+
      "974,1.4,10,79,23.7334\n"+
      "975,1.4,10,80,22.9807\n"+
      "976,1.4,10,81,22.2423\n"+
      "977,1.4,10,82,21.5186\n"+
      "978,1.4,10,83,20.8096\n"+
      "979,1.4,10,84,20.1157\n"+
      "980,1.4,10,85,19.4368\n"+
      "981,1.4,10,86,18.7733\n"+
      "982,1.4,10,87,18.125\n"+
      "983,1.4,10,88,17.4922\n"+
      "984,1.4,10,89,16.8748\n"+
      "985,1.4,10,90,16.2729\n"+
      "986,1.4,10,91,15.6864\n"+
      "987,1.4,10,92,15.1153\n"+
      "988,1.4,10,93,14.5596\n"+
      "989,1.4,10,94,14.0192\n"+
      "990,1.4,10,95,13.4939\n"+
      "991,1.4,10,96,12.9837\n"+
      "992,1.4,10,97,12.4883\n"+
      "993,1.4,10,98,12.0077\n"+
      "994,1.4,10,99,11.5417\n"+
      "995,1.4,10,100,11.09\n"+
      "996,1.4,10,101,10.6525\n"+
      "997,1.4,10,102,10.229\n"+
      "998,1.4,10,103,9.8191\n"+
      "999,1.4,10,104,9.4227\n"+
      "1000,1.4,10,105,9.0396\n"+
      "1001,1.4,10,106,8.6694\n"+
      "1002,1.4,10,107,8.312\n"+
      "1003,1.4,10,108,7.9669\n"+
      "1004,1.4,10,109,7.634\n"+
      "1005,1.4,10,110,7.313\n"+
      "1006,1.4,10,111,7.0036\n"+
      "1007,1.4,10,112,6.7054\n"+
      "1008,1.4,10,113,6.4183\n"+
      "1009,1.4,10,114,6.1418\n"+
      "1010,1.4,10,115,5.8758\n"+
      "1011,1.4,10,116,5.6199\n"+
      "1012,1.4,10,117,5.3739\n"+
      "1013,1.4,10,118,5.1374\n"+
      "1014,1.4,10,119,4.9102\n"+
      "1015,1.4,10,120,4.692\n"+
      "1016,1.4,10,121,4.4824\n"+
      "1017,1.4,10,122,4.2813\n"+
      "1018,1.4,10,123,4.0884\n"+
      "1019,1.4,10,124,3.9033\n"+
      "1020,1.4,10,125,3.7259\n"+
      "1021,1.4,15,75,28.2699\n"+
      "1022,1.4,15,76,27.5271\n"+
      "1023,1.4,15,77,26.7969\n"+
      "1024,1.4,15,78,26.0794\n"+
      "1025,1.4,15,79,25.3747\n"+
      "1026,1.4,15,80,24.6829\n"+
      "1027,1.4,15,81,24.0041\n"+
      "1028,1.4,15,82,23.3384\n"+
      "1029,1.4,15,83,22.6858\n"+
      "1030,1.4,15,84,22.0463\n"+
      "1031,1.4,15,85,21.4199\n"+
      "1032,1.4,15,86,20.8066\n"+
      "1033,1.4,15,87,20.2064\n"+
      "1034,1.4,15,88,19.6193\n"+
      "1035,1.4,15,89,19.0452\n"+
      "1036,1.4,15,90,18.484\n"+
      "1037,1.4,15,91,17.9356\n"+
      "1038,1.4,15,92,17.4001\n"+
      "1039,1.4,15,93,16.8771\n"+
      "1040,1.4,15,94,16.3668\n"+
      "1041,1.4,15,95,15.8688\n"+
      "1042,1.4,15,96,15.3832\n"+
      "1043,1.4,15,97,14.9097\n"+
      "1044,1.4,15,98,14.4482\n"+
      "1045,1.4,15,99,13.9985\n"+
      "1046,1.4,15,100,13.5605\n"+
      "1047,1.4,15,101,13.1341\n"+
      "1048,1.4,15,102,12.7189\n"+
      "1049,1.4,15,103,12.3149\n"+
      "1050,1.4,15,104,11.9219\n"+
      "1051,1.4,15,105,11.5397\n"+
      "1052,1.4,15,106,11.168\n"+
      "1053,1.4,15,107,10.8068\n"+
      "1054,1.4,15,108,10.4557\n"+
      "1055,1.4,15,109,10.1147\n"+
      "1056,1.4,15,110,9.7835\n"+
      "1057,1.4,15,111,9.4618\n"+
      "1058,1.4,15,112,9.1495\n"+
      "1059,1.4,15,113,8.8465\n"+
      "1060,1.4,15,114,8.5524\n"+
      "1061,1.4,15,115,8.2671\n"+
      "1062,1.4,15,116,7.9904\n"+
      "1063,1.4,15,117,7.7221\n"+
      "1064,1.4,15,118,7.4619\n"+
      "1065,1.4,15,119,7.2098\n"+
      "1066,1.4,15,120,6.9654\n"+
      "1067,1.4,15,121,6.7286\n"+
      "1068,1.4,15,122,6.4992\n"+
      "1069,1.4,15,123,6.2771\n"+
      "1070,1.4,15,124,6.0619\n"+
      "1071,1.4,15,125,5.8536\n"+
      "1072,1.6,5,75,25.93\n"+
      "1073,1.6,5,76,25.0583\n"+
      "1074,1.6,5,77,24.1993\n"+
      "1075,1.6,5,78,23.3536\n"+
      "1076,1.6,5,79,22.5218\n"+
      "1077,1.6,5,80,21.7045\n"+
      "1078,1.6,5,81,20.9023\n"+
      "1079,1.6,5,82,20.1156\n"+
      "1080,1.6,5,83,19.345\n"+
      "1081,1.6,5,84,18.5909\n"+
      "1082,1.6,5,85,17.8538\n"+
      "1083,1.6,5,86,17.134\n"+
      "1084,1.6,5,87,16.4318\n"+
      "1085,1.6,5,88,15.7474\n"+
      "1086,1.6,5,89,15.0813\n"+
      "1087,1.6,5,90,14.4334\n"+
      "1088,1.6,5,91,13.8041\n"+
      "1089,1.6,5,92,13.1932\n"+
      "1090,1.6,5,93,12.601\n"+
      "1091,1.6,5,94,12.0274\n"+
      "1092,1.6,5,95,11.4724\n"+
      "1093,1.6,5,96,10.9359\n"+
      "1094,1.6,5,97,10.4178\n"+
      "1095,1.6,5,98,9.9179\n"+
      "1096,1.6,5,99,9.4361\n"+
      "1097,1.6,5,100,8.9722\n"+
      "1098,1.6,5,101,8.5258\n"+
      "1099,1.6,5,102,8.0967\n"+
      "1100,1.6,5,103,7.6846\n"+
      "1101,1.6,5,104,7.2892\n"+
      "1102,1.6,5,105,6.9101\n"+
      "1103,1.6,5,106,6.5471\n"+
      "1104,1.6,5,107,6.1996\n"+
      "1105,1.6,5,108,5.8672\n"+
      "1106,1.6,5,109,5.5497\n"+
      "1107,1.6,5,110,5.2466\n"+
      "1108,1.6,5,111,4.9573\n"+
      "1109,1.6,5,112,4.6816\n"+
      "1110,1.6,5,113,4.419\n"+
      "1111,1.6,5,114,4.169\n"+
      "1112,1.6,5,115,3.9312\n"+
      "1113,1.6,5,116,3.7052\n"+
      "1114,1.6,5,117,3.4905\n"+
      "1115,1.6,5,118,3.2867\n"+
      "1116,1.6,5,119,3.0934\n"+
      "1117,1.6,5,120,2.9101\n"+
      "1118,1.6,5,121,2.7365\n"+
      "1119,1.6,5,122,2.5722\n"+
      "1120,1.6,5,123,2.4167\n"+
      "1121,1.6,5,124,2.2696\n"+
      "1122,1.6,5,125,2.1306\n"+
      "1123,1.6,10,75,27.7376\n"+
      "1124,1.6,10,76,26.9726\n"+
      "1125,1.6,10,77,26.2205\n"+
      "1126,1.6,10,78,25.4815\n"+
      "1127,1.6,10,79,24.7557\n"+
      "1128,1.6,10,80,24.0433\n"+
      "1129,1.6,10,81,23.3445\n"+
      "1130,1.6,10,82,22.6592\n"+
      "1131,1.6,10,83,21.9877\n"+
      "1132,1.6,10,84,21.3299\n"+
      "1133,1.6,10,85,20.6859\n"+
      "1134,1.6,10,86,20.0558\n"+
      "1135,1.6,10,87,19.4396\n"+
      "1136,1.6,10,88,18.8372\n"+
      "1137,1.6,10,89,18.2486\n"+
      "1138,1.6,10,90,17.6737\n"+
      "1139,1.6,10,91,17.1126\n"+
      "1140,1.6,10,92,16.5651\n"+
      "1141,1.6,10,93,16.0311\n"+
      "1142,1.6,10,94,15.5106\n"+
      "1143,1.6,10,95,15.0034\n"+
      "1144,1.6,10,96,14.5093\n"+
      "1145,1.6,10,97,14.0283\n"+
      "1146,1.6,10,98,13.5601\n"+
      "1147,1.6,10,99,13.1047\n"+
      "1148,1.6,10,100,12.6618\n"+
      "1149,1.6,10,101,12.2312\n"+
      "1150,1.6,10,102,11.8129\n"+
      "1151,1.6,10,103,11.4065\n"+
      "1152,1.6,10,104,11.0118\n"+
      "1153,1.6,10,105,10.6288\n"+
      "1154,1.6,10,106,10.257\n"+
      "1155,1.6,10,107,9.8965\n"+
      "1156,1.6,10,108,9.5468\n"+
      "1157,1.6,10,109,9.2078\n"+
      "1158,1.6,10,110,8.8794\n"+
      "1159,1.6,10,111,8.5611\n"+
      "1160,1.6,10,112,8.2529\n"+
      "1161,1.6,10,113,7.9544\n"+
      "1162,1.6,10,114,7.6656\n"+
      "1163,1.6,10,115,7.386\n"+
      "1164,1.6,10,116,7.1156\n"+
      "1165,1.6,10,117,6.854\n"+
      "1166,1.6,10,118,6.6011\n"+
      "1167,1.6,10,119,6.3566\n"+
      "1168,1.6,10,120,6.1203\n"+
      "1169,1.6,10,121,5.8919\n"+
      "1170,1.6,10,122,5.6714\n"+
      "1171,1.6,10,123,5.4584\n"+
      "1172,1.6,10,124,5.2527\n"+
      "1173,1.6,10,125,5.0542\n"+
      "1174,1.6,15,75,29.4857\n"+
      "1175,1.6,15,76,28.7855\n"+
      "1176,1.6,15,77,28.0972\n"+
      "1177,1.6,15,78,27.4208\n"+
      "1178,1.6,15,79,26.7562\n"+
      "1179,1.6,15,80,26.1036\n"+
      "1180,1.6,15,81,25.4628\n"+
      "1181,1.6,15,82,24.834\n"+
      "1182,1.6,15,83,24.2169\n"+
      "1183,1.6,15,84,23.6118\n"+
      "1184,1.6,15,85,23.0184\n"+
      "1185,1.6,15,86,22.4367\n"+
      "1186,1.6,15,87,21.8667\n"+
      "1187,1.6,15,88,21.3083\n"+
      "1188,1.6,15,89,20.7614\n"+
      "1189,1.6,15,90,20.226\n"+
      "1190,1.6,15,91,19.7018\n"+
      "1191,1.6,15,92,19.1889\n"+
      "1192,1.6,15,93,18.6871\n"+
      "1193,1.6,15,94,18.1963\n"+
      "1194,1.6,15,95,17.7163\n"+
      "1195,1.6,15,96,17.2471\n"+
      "1196,1.6,15,97,16.7885\n"+
      "1197,1.6,15,98,16.3403\n"+
      "1198,1.6,15,99,15.9025\n"+
      "1199,1.6,15,100,15.4748\n"+
      "1200,1.6,15,101,15.0572\n"+
      "1201,1.6,15,102,14.6494\n"+
      "1202,1.6,15,103,14.2514\n"+
      "1203,1.6,15,104,13.8629\n"+
      "1204,1.6,15,105,13.4838\n"+
      "1205,1.6,15,106,13.114\n"+
      "1206,1.6,15,107,12.7532\n"+
      "1207,1.6,15,108,12.4014\n"+
      "1208,1.6,15,109,12.0584\n"+
      "1209,1.6,15,110,11.7239\n"+
      "1210,1.6,15,111,11.3979\n"+
      "1211,1.6,15,112,11.0802\n"+
      "1212,1.6,15,113,10.7705\n"+
      "1213,1.6,15,114,10.4688\n"+
      "1214,1.6,15,115,10.175\n"+
      "1215,1.6,15,116,9.8887\n"+
      "1216,1.6,15,117,9.6099\n"+
      "1217,1.6,15,118,9.3384\n"+
      "1218,1.6,15,119,9.074\n"+
      "1219,1.6,15,120,8.8167\n"+
      "1220,1.6,15,121,8.5662\n"+
      "1221,1.6,15,122,8.3223\n"+
      "1222,1.6,15,123,8.0851\n"+
      "1223,1.6,15,124,7.8541\n"+
      "1224,1.6,15,125,7.6295\n"+
      "1225,1.8,5,75,26.3989\n"+
      "1226,1.8,5,76,25.5621\n"+
      "1227,1.8,5,77,24.7384\n"+
      "1228,1.8,5,78,23.9282\n"+
      "1229,1.8,5,79,23.1321\n"+
      "1230,1.8,5,80,22.3503\n"+
      "1231,1.8,5,81,21.5834\n"+
      "1232,1.8,5,82,20.8317\n"+
      "1233,1.8,5,83,20.0954\n"+
      "1234,1.8,5,84,19.3749\n"+
      "1235,1.8,5,85,18.6704\n"+
      "1236,1.8,5,86,17.9821\n"+
      "1237,1.8,5,87,17.3102\n"+
      "1238,1.8,5,88,16.6548\n"+
      "1239,1.8,5,89,16.0161\n"+
      "1240,1.8,5,90,15.3941\n"+
      "1241,1.8,5,91,14.7888\n"+
      "1242,1.8,5,92,14.2004\n"+
      "1243,1.8,5,93,13.6286\n"+
      "1244,1.8,5,94,13.0736\n"+
      "1245,1.8,5,95,12.5353\n"+
      "1246,1.8,5,96,12.0134\n"+
      "1247,1.8,5,97,11.5079\n"+
      "1248,1.8,5,98,11.0186\n"+
      "1249,1.8,5,99,10.5454\n"+
      "1250,1.8,5,100,10.088\n"+
      "1251,1.8,5,101,9.6462\n"+
      "1252,1.8,5,102,9.2198\n"+
      "1253,1.8,5,103,8.8084\n"+
      "1254,1.8,5,104,8.4119\n"+
      "1255,1.8,5,105,8.03\n"+
      "1256,1.8,5,106,7.6623\n"+
      "1257,1.8,5,107,7.3085\n"+
      "1258,1.8,5,108,6.9683\n"+
      "1259,1.8,5,109,6.6414\n"+
      "1260,1.8,5,110,6.3275\n"+
      "1261,1.8,5,111,6.0261\n"+
      "1262,1.8,5,112,5.737\n"+
      "1263,1.8,5,113,5.4599\n"+
      "1264,1.8,5,114,5.1943\n"+
      "1265,1.8,5,115,4.9399\n"+
      "1266,1.8,5,116,4.6964\n"+
      "1267,1.8,5,117,4.4634\n"+
      "1268,1.8,5,118,4.2406\n"+
      "1269,1.8,5,119,4.0276\n"+
      "1270,1.8,5,120,3.8242\n"+
      "1271,1.8,5,121,3.6299\n"+
      "1272,1.8,5,122,3.4444\n"+
      "1273,1.8,5,123,3.2675\n"+
      "1274,1.8,5,124,3.0988\n"+
      "1275,1.8,5,125,2.9379\n"+
      "1276,1.8,10,75,28.6825\n"+
      "1277,1.8,10,76,27.9553\n"+
      "1278,1.8,10,77,27.2404\n"+
      "1279,1.8,10,78,26.5379\n"+
      "1280,1.8,10,79,25.8479\n"+
      "1281,1.8,10,80,25.1705\n"+
      "1282,1.8,10,81,24.5057\n"+
      "1283,1.8,10,82,23.8535\n"+
      "1284,1.8,10,83,23.214\n"+
      "1285,1.8,10,84,22.5871\n"+
      "1286,1.8,10,85,21.9728\n"+
      "1287,1.8,10,86,21.3712\n"+
      "1288,1.8,10,87,20.7821\n"+
      "1289,1.8,10,88,20.2055\n"+
      "1290,1.8,10,89,19.6414\n"+
      "1291,1.8,10,90,19.0896\n"+
      "1292,1.8,10,91,18.5502\n"+
      "1293,1.8,10,92,18.0229\n"+
      "1294,1.8,10,93,17.5077\n"+
      "1295,1.8,10,94,17.0044\n"+
      "1296,1.8,10,95,16.513\n"+
      "1297,1.8,10,96,16.0333\n"+
      "1298,1.8,10,97,15.5651\n"+
      "1299,1.8,10,98,15.1084\n"+
      "1300,1.8,10,99,14.6629\n"+
      "1301,1.8,10,100,14.2286\n"+
      "1302,1.8,10,101,13.8051\n"+
      "1303,1.8,10,102,13.3925\n"+
      "1304,1.8,10,103,12.9905\n"+
      "1305,1.8,10,104,12.5989\n"+
      "1306,1.8,10,105,12.2176\n"+
      "1307,1.8,10,106,11.8464\n"+
      "1308,1.8,10,107,11.485\n"+
      "1309,1.8,10,108,11.1334\n"+
      "1310,1.8,10,109,10.7913\n"+
      "1311,1.8,10,110,10.4586\n"+
      "1312,1.8,10,111,10.135\n"+
      "1313,1.8,10,112,9.8204\n"+
      "1314,1.8,10,113,9.5146\n"+
      "1315,1.8,10,114,9.2174\n"+
      "1316,1.8,10,115,8.9286\n"+
      "1317,1.8,10,116,8.648\n"+
      "1318,1.8,10,117,8.3755\n"+
      "1319,1.8,10,118,8.1108\n"+
      "1320,1.8,10,119,7.8538\n"+
      "1321,1.8,10,120,7.6043\n"+
      "1322,1.8,10,121,7.3622\n"+
      "1323,1.8,10,122,7.1271\n"+
      "1324,1.8,10,123,6.8991\n"+
      "1325,1.8,10,124,6.6778\n"+
      "1326,1.8,10,125,6.4631\n"+
      "1327,1.8,15,75,30.7819\n"+
      "1328,1.8,15,76,30.119\n"+
      "1329,1.8,15,77,29.4671\n"+
      "1330,1.8,15,78,28.8262\n"+
      "1331,1.8,15,79,28.1963\n"+
      "1332,1.8,15,80,27.5773\n"+
      "1333,1.8,15,81,26.9692\n"+
      "1334,1.8,15,82,26.372\n"+
      "1335,1.8,15,83,25.7855\n"+
      "1336,1.8,15,84,25.2098\n"+
      "1337,1.8,15,85,24.6446\n"+
      "1338,1.8,15,86,24.0901\n"+
      "1339,1.8,15,87,23.546\n"+
      "1340,1.8,15,88,23.0124\n"+
      "1341,1.8,15,89,22.489\n"+
      "1342,1.8,15,90,21.9758\n"+
      "1343,1.8,15,91,21.4727\n"+
      "1344,1.8,15,92,20.9796\n"+
      "1345,1.8,15,93,20.4964\n"+
      "1346,1.8,15,94,20.0229\n"+
      "1347,1.8,15,95,19.5591\n"+
      "1348,1.8,15,96,19.1047\n"+
      "1349,1.8,15,97,18.6598\n"+
      "1350,1.8,15,98,18.2241\n"+
      "1351,1.8,15,99,17.7975\n"+
      "1352,1.8,15,100,17.38\n"+
      "1353,1.8,15,101,16.9713\n"+
      "1354,1.8,15,102,16.5713\n"+
      "1355,1.8,15,103,16.18\n"+
      "1356,1.8,15,104,15.7971\n"+
      "1357,1.8,15,105,15.4225\n"+
      "1358,1.8,15,106,15.0562\n"+
      "1359,1.8,15,107,14.6978\n"+
      "1360,1.8,15,108,14.3474\n"+
      "1361,1.8,15,109,14.0048\n"+
      "1362,1.8,15,110,13.6699\n"+
      "1363,1.8,15,111,13.3424\n"+
      "1364,1.8,15,112,13.0223\n"+
      "1365,1.8,15,113,12.7094\n"+
      "1366,1.8,15,114,12.4037\n"+
      "1367,1.8,15,115,12.1049\n"+
      "1368,1.8,15,116,11.8129\n"+
      "1369,1.8,15,117,11.5277\n"+
      "1370,1.8,15,118,11.249\n"+
      "1371,1.8,15,119,10.9768\n"+
      "1372,1.8,15,120,10.7109\n"+
      "1373,1.8,15,121,10.4512\n"+
      "1374,1.8,15,122,10.1975\n"+
      "1375,1.8,15,123,9.9498\n"+
      "1376,1.8,15,124,9.7079\n"+
      "1377,1.8,15,125,9.4717\n"+
      "1378,2,5,75,26.9397\n"+
      "1379,2,5,76,26.1355\n"+
      "1380,2,5,77,25.3445\n"+
      "1381,2,5,78,24.567\n"+
      "1382,2,5,79,23.8032\n"+
      "1383,2,5,80,23.0536\n"+
      "1384,2,5,81,22.3182\n"+
      "1385,2,5,82,21.5974\n"+
      "1386,2,5,83,20.8913\n"+
      "1387,2,5,84,20.2002\n"+
      "1388,2,5,85,19.524\n"+
      "1389,2,5,86,18.863\n"+
      "1390,2,5,87,18.2172\n"+
      "1391,2,5,88,17.5868\n"+
      "1392,2,5,89,16.9716\n"+
      "1393,2,5,90,16.3718\n"+
      "1394,2,5,91,15.7872\n"+
      "1395,2,5,92,15.218\n"+
      "1396,2,5,93,14.6639\n"+
      "1397,2,5,94,14.125\n"+
      "1398,2,5,95,13.6011\n"+
      "1399,2,5,96,13.0921\n"+
      "1400,2,5,97,12.5978\n"+
      "1401,2,5,98,12.1182\n"+
      "1402,2,5,99,11.6529\n"+
      "1403,2,5,100,11.2019\n"+
      "1404,2,5,101,10.7649\n"+
      "1405,2,5,102,10.3416\n"+
      "1406,2,5,103,9.932\n"+
      "1407,2,5,104,9.5357\n"+
      "1408,2,5,105,9.1525\n"+
      "1409,2,5,106,8.7821\n"+
      "1410,2,5,107,8.4243\n"+
      "1411,2,5,108,8.0789\n"+
      "1412,2,5,109,7.7454\n"+
      "1413,2,5,110,7.4237\n"+
      "1414,2,5,111,7.1135\n"+
      "1415,2,5,112,6.8145\n"+
      "1416,2,5,113,6.5264\n"+
      "1417,2,5,114,6.2489\n"+
      "1418,2,5,115,5.9818\n"+
      "1419,2,5,116,5.7247\n"+
      "1420,2,5,117,5.4773\n"+
      "1421,2,5,118,5.2395\n"+
      "1422,2,5,119,5.0109\n"+
      "1423,2,5,120,4.7911\n"+
      "1424,2,5,121,4.5801\n"+
      "1425,2,5,122,4.3774\n"+
      "1426,2,5,123,4.1828\n"+
      "1427,2,5,124,3.9961\n"+
      "1428,2,5,125,3.817\n"+
      "1429,2,10,75,29.6947\n"+
      "1430,2,10,76,29.0011\n"+
      "1431,2,10,77,28.3191\n"+
      "1432,2,10,78,27.6489\n"+
      "1433,2,10,79,26.9904\n"+
      "1434,2,10,80,26.3436\n"+
      "1435,2,10,81,25.7086\n"+
      "1436,2,10,82,25.0852\n"+
      "1437,2,10,83,24.4736\n"+
      "1438,2,10,84,23.8735\n"+
      "1439,2,10,85,23.2851\n"+
      "1440,2,10,86,22.7082\n"+
      "1441,2,10,87,22.1427\n"+
      "1442,2,10,88,21.5886\n"+
      "1443,2,10,89,21.0459\n"+
      "1444,2,10,90,20.5143\n"+
      "1445,2,10,91,19.9938\n"+
      "1446,2,10,92,19.4843\n"+
      "1447,2,10,93,18.9857\n"+
      "1448,2,10,94,18.4979\n"+
      "1449,2,10,95,18.0207\n"+
      "1450,2,10,96,17.554\n"+
      "1451,2,10,97,17.0977\n"+
      "1452,2,10,98,16.6517\n"+
      "1453,2,10,99,16.2157\n"+
      "1454,2,10,100,15.7897\n"+
      "1455,2,10,101,15.3736\n"+
      "1456,2,10,102,14.9671\n"+
      "1457,2,10,103,14.5701\n"+
      "1458,2,10,104,14.1825\n"+
      "1459,2,10,105,13.8041\n"+
      "1460,2,10,106,13.4347\n"+
      "1461,2,10,107,13.0743\n"+
      "1462,2,10,108,12.7226\n"+
      "1463,2,10,109,12.3794\n"+
      "1464,2,10,110,12.0447\n"+
      "1465,2,10,111,11.7183\n"+
      "1466,2,10,112,11.4\n"+
      "1467,2,10,113,11.0896\n"+
      "1468,2,10,114,10.7871\n"+
      "1469,2,10,115,10.4921\n"+
      "1470,2,10,116,10.2047\n"+
      "1471,2,10,117,9.9246\n"+
      "1472,2,10,118,9.6517\n"+
      "1473,2,10,119,9.3858\n"+
      "1474,2,10,120,9.1267\n"+
      "1475,2,10,121,8.8744\n"+
      "1476,2,10,122,8.6287\n"+
      "1477,2,10,123,8.3894\n"+
      "1478,2,10,124,8.1564\n"+
      "1479,2,10,125,7.9295\n"+
      "1480,2,15,75,32.1349\n"+
      "1481,2,15,76,31.5049\n"+
      "1482,2,15,77,30.885\n"+
      "1483,2,15,78,30.2754\n"+
      "1484,2,15,79,29.6759\n"+
      "1485,2,15,80,29.0864\n"+
      "1486,2,15,81,28.5069\n"+
      "1487,2,15,82,27.9373\n"+
      "1488,2,15,83,27.3776\n"+
      "1489,2,15,84,26.8276\n"+
      "1490,2,15,85,26.2873\n"+
      "1491,2,15,86,25.7566\n"+
      "1492,2,15,87,25.2354\n"+
      "1493,2,15,88,24.7235\n"+
      "1494,2,15,89,24.221\n"+
      "1495,2,15,90,23.7276\n"+
      "1496,2,15,91,23.2433\n"+
      "1497,2,15,92,22.768\n"+
      "1498,2,15,93,22.3015\n"+
      "1499,2,15,94,21.8438\n"+
      "1500,2,15,95,21.3948\n"+
      "1501,2,15,96,20.9542\n"+
      "1502,2,15,97,20.5221\n"+
      "1503,2,15,98,20.0983\n"+
      "1504,2,15,99,19.6826\n"+
      "1505,2,15,100,19.275\n"+
      "1506,2,15,101,18.8753\n"+
      "1507,2,15,102,18.4834\n"+
      "1508,2,15,103,18.0993\n"+
      "1509,2,15,104,17.7227\n"+
      "1510,2,15,105,17.3536\n"+
      "1511,2,15,106,16.9918\n"+
      "1512,2,15,107,16.6372\n"+
      "1513,2,15,108,16.2898\n"+
      "1514,2,15,109,15.9493\n"+
      "1515,2,15,110,15.6157\n"+
      "1516,2,15,111,15.2888\n"+
      "1517,2,15,112,14.9686\n"+
      "1518,2,15,113,14.6548\n"+
      "1519,2,15,114,14.3475\n"+
      "1520,2,15,115,14.0465\n"+
      "1521,2,15,116,13.7517\n"+
      "1522,2,15,117,13.4629\n"+
      "1523,2,15,118,13.1801\n"+
      "1524,2,15,119,12.9031\n"+
      "1525,2,15,120,12.6318\n"+
      "1526,2,15,121,12.3662\n"+
      "1527,2,15,122,12.1061\n"+
      "1528,2,15,123,11.8515\n"+
      "1529,2,15,124,11.6021\n"+
      "1530,2,15,125,11.358\n"
  },


  initialize: function(){
    if(!this.get('results')) {
      this.set('results', new Results())
    }
    this.csvToMetaData();
  },

  csvToMetaData: function(){
    try{
      var firstline = this.get('raw_csv_data').substring(0, this.get('raw_csv_data').indexOf('\n'));
      var self = this;
      var list = firstline.slice(0).split(",");
      var array = self.get('metaHash').colNameArray;
      _.each(list,function(value, index){
        if(!array[index]){
          array[index] = {};
          array[index].skip = true;    //DEBUGG
          array[index].type = undefined;
        }
        array[index].name = value;
      });

      if(array.length > list.length){
        array.splice(list.length);
        if(self.get('metaHash').target >= list.length){
          self.get('metaHash').target = undefined;
        }
      }
    } catch(err){
      console.log("could not convert csv to table, try again, err:", err.message);
    }
    this.trigger('all:metaHash ');
  },
  updateMetaData: function(type,index){
    var mH = this.get('metaHash').colNameArray[index];
    if(type === 'skip'){
      mH.skip = !mH.skip;
      console.log('from skip: ', mH);
    } else if(type === 'target'){
      this.get('metaHash').target = index;
      console.log('from target: ',mH);
    } else if(type === 'type') {
      mH.type = mH.type === 'continuous' ? 'discrete' : 'continuous';
      mH.skip = false;
      console.log(mH);
    } else {
      alert('unidentified type passed to updateMetaData: ', type);
    }
    if(+index === +this.get('metaHash').target){
        mH.skip = false;
      }
    this.trigger('all:metaHash');
  },
  normalizeData: function(){
    var unNormalizedObjects = this.csvToObject(this.get('raw_csv_data'), this.get('metaHash'));
    //works on unNormalizedObjects in place, (last line is "return unNormalizedObjects;")
    this.set('normalizedObject', this.normalizeObject(unNormalizedObjects, this.get('metaHash'), this.get('specializedData')));
    this.set('normalizedCsvData',JSON.stringify(this.get('normalizedObject')).replace(/,{"input":{/g,','+'\n'+'{"input":{'));
    this.trigger('all:normalizedCsvData');
  },
  normalizeObject: function(unNormalizedObjects, metaHash, specializedData){
    var i = null;
    var metaArray = metaHash.colNameArray;
    for( i = 0; i < metaArray.length; i++){
      if(!metaArray[i].skip){
        metaHash.nameIndexHash[metaArray[i].name] = i;
        specializedData[i] = {};
        specializedData[i].name = metaArray[i].name;
        specializedData[i].unNormalized = [];
        specializedData[i].normalized = [];
      }
    }
    for( i = 0; i < unNormalizedObjects.length; i++){
      var inputHash = unNormalizedObjects[i].input;
      var keys = Object.keys(inputHash);
      for(var j = 0; j < keys.length; j++){
        var name = keys[j];
        specializedData[metaHash.nameIndexHash[name]].unNormalized.push(inputHash[name]);
        inputHash[name] = metaArray[metaHash.nameIndexHash[name]].realToNormalized(inputHash[name]);
        specializedData[metaHash.nameIndexHash[name]].normalized.push(inputHash[name]);
      }
      var targetObj = metaArray[metaHash.target]
      var outputKey = targetObj.name;
      specializedData[metaHash.target].unNormalized.push(unNormalizedObjects[i].output[outputKey]);
      unNormalizedObjects[i].output[outputKey] = targetObj.realToNormalized(unNormalizedObjects[i].output[outputKey]);
      specializedData[metaHash.target].normalized.push(unNormalizedObjects[i].output[outputKey]);
    }
    return unNormalizedObjects;
  },
  trainOnData: function() {
      console.log('triggering worker!!!');
    if(window.Worker) {
    // if(false){
      console.log('start with worker');
      var worker = new Worker("assets/javascripts/training-worker.js");
      var self = this;
      worker.onmessage = function(event){
        self.set('trainerMessage', event);
        self.trigger('all:trainerMessage');
        console.log('onMessage!', event);
      }
      worker.onerror = function(event){
        self.set('trainerError', event);
        self.trigger('all:trainerError');
        console.log('onError!', event);
        }
      worker.postMessage(JSON.stringify([this.get('metaHash').trainer.parameters,this.get('normalizedObject')]));
      console.log('done with worker');
    } else {
      console.log('start with OUT worker');
      var net = new brain.NeuralNetwork();
      net.train(this.get('normalizedObject'), this.get('metaHash').trainer.parameters);
      this.trigger('all:trainerMessage');
      console.log("ran with OUT workeer")
    }
  },
  parseCSVLine: function(line){
    //from:http://www.cparker15.com/code/utilities/csv-to-json/
    //6/4/2013
    //Christopher Parker
    //slightly customized

    // <!--
    //  * csv-to-json: A utility that converts data format from CSV to JSON.
    //  * Copyright (C) 2009-2012 Christopher Parker <http://www.cparker15.com/>
    //  * 
    //  * csv-to-json is free software: you can redistribute it and/or modify
    //  * it under the terms of the GNU Lesser General Public License as published by
    //  * the Free Software Foundation, either version 3 of the License, or
    //  * (at your option) any later version.
    //  * 
    //  * csv-to-json is distributed in the hope that it will be useful,
    //  * but WITHOUT ANY WARRANTY; without even the implied warranty of
    //  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    //  * GNU Lesser General Public License for more details.
    //  * 
    //  * You should have received a copy of the GNU Lesser General Public License
    //  * along with csv-to-json.  If not, see <http://www.gnu.org/licenses/>.
    // -->
    var csvRows = [];
    var objArr = [];
    line = line.split(',');
    // check for splits performed inside quoted strings and correct if needed
    for (var i = 0; i < line.length; i++)
    {
      var chunk = line[i].replace(/^[\s]*|[\s]*$/g, "");
      var quote = "";
      if (chunk.charAt(0) == '"' || chunk.charAt(0) == "'") quote = chunk.charAt(0);
      if (quote != "" && chunk.charAt(chunk.length - 1) == quote) quote = "";
      if (quote != "")
      {
        var j = i + 1;
        if (j < line.length) chunk = line[j].replace(/^[\s]*|[\s]*$/g, "");
        while (j < line.length && chunk.charAt(chunk.length - 1) != quote)
        {
          line[i] += ',' + line[j];
          line.splice(j, 1);
          chunk = line[j].replace(/[\s]*$/g, "");
        }
        if (j < line.length)
        {
          line[i] += ',' + line[j];
          line.splice(j, 1);
        }
      }
    }
    for (i = 0; i < line.length; i++)
    {
      // remove leading/trailing whitespace
      line[i] = line[i].replace(/^[\s]*|[\s]*$/g, "");
      line[i] = line[i].replace(/%/g,"");
      // remove leading/trailing quotes
      if (line[i].charAt(0) == '"') line[i] = line[i].replace(/^"|"$/g, "");
      else if (line[i].charAt(0) == "'") line[i] = line[i].replace(/^'|'$/g, "");
    }
    return line;
  },
  csvToObject: function(csvText, metaHash){
    //from:http://www.cparker15.com/code/utilities/csv-to-json/
    //6/4/2013
    //Christopher Parker
    //slightly customized

    // <!--
    //  * csv-to-json: A utility that converts data format from CSV to JSON.
    //  * Copyright (C) 2009-2012 Christopher Parker <http://www.cparker15.com/>
    //  * 
    //  * csv-to-json is free software: you can redistribute it and/or modify
    //  * it under the terms of the GNU Lesser General Public License as published by
    //  * the Free Software Foundation, either version 3 of the License, or
    //  * (at your option) any later version.
    //  * 
    //  * csv-to-json is distributed in the hope that it will be useful,
    //  * but WITHOUT ANY WARRANTY; without even the implied warranty of
    //  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    //  * GNU Lesser General Public License for more details.
    //  * 
    //  * You should have received a copy of the GNU Lesser General Public License
    //  * along with csv-to-json.  If not, see <http://www.gnu.org/licenses/>.
    // -->
    var message = "";
    var error = false;
    var jsonText = "";
    var indexOfResultColumn = +metaHash.target;
    var indexesOfColumnToSkip = [];
    var i, j, k = null;
    var metaArray = metaHash.colNameArray;

    if (csvText == "") { error = true; message = "empty input"; }

    if (!error){
      csvRows = csvText.split(/[\r\n]/g); // split into rows

      // get rid of empty rows
      for (i = 0; i < csvRows.length; i++){
        if (csvRows[i].replace(/^[\s]*|[\s]*$/g, '') == ""){
          csvRows.splice(i, 1);
          i--;
        }
      }

      if (csvRows.length < 2) {
        error = true;
        message = 'The CSV text MUST have a header row!';
        console.log('error: The CSV text MUST have a header row!');
      } else {
        objArr = [];
        for (i = 0; i < csvRows.length; i++){
          csvRows[i] = this.parseCSVLine(csvRows[i]);
        }

        this.get('metaHash').count = csvRows.length - 1;

        //find indexes of columns to skip and update metaHash
        for(i = 0; i < metaArray.length; i++){
          if(metaArray[i].skip){
            indexesOfColumnToSkip.push(i);
            continue;
          }
          if(metaArray[i].type === 'continuous'){
            metaArray[i].max = 0;
            metaArray[i].min = null;
          } else if(metaArray[i].type === 'discrete'){
            throw new Error("discrete not handled yet!");// TODO
          } else { throw new Error('unknown type from metaArray[i].type: ' + metaArray[i].type) }
        }

        for (i = 1; i < csvRows.length; i++)
        {
          if (csvRows[i].length > 0) objArr.push({input: {}, output: {}});

          for (j = 0; j < csvRows[i].length; j++)
          {
            var continueFlag = 0;
            for(k = 0; k < indexesOfColumnToSkip.length; k++){
              if(j === indexesOfColumnToSkip[k]){
                continueFlag = 1;
                break;
              }
            }
            if(continueFlag) { continue; }
            if(metaArray[j].type === 'continuous'){
              if(metaArray[j].max < +csvRows[i][j]){
                metaArray[j].max = +csvRows[i][j];
              }
              if(metaArray[j].min === null || metaArray[j].min > +csvRows[i][j]){
                metaArray[j].min = +csvRows[i][j];
              }
            } else if(metaArray[j].type === 'discrete'){
              throw new Error("discrete not handled yet!");// TODO
            } else { throw new Error('unknown type from metaArray[j].type: ' + metaArray[j].type) }
            if(j !== indexOfResultColumn){
              objArr[i - 1].input[csvRows[0][j]] = csvRows[i][j];
            } else {
              objArr[i - 1].output[csvRows[0][j]] = csvRows[i][j];
            }
          }
        }

        for(i = 0; i < metaArray.length; i++){
          metaArray[i].realToNormalized = function(realNum){
            if(this.type === 'continuous'){
              return (realNum - this.min) / (this.max - this.min);
            } else if(metaArray[i].type === 'discrete'){
              throw new Error("discrete not handled yet!");// TODO
            } else { throw new Error('unknown type from metaArray[i].type: ' + metaArray[i].type) }
          };
          metaArray[i].normalizedToReal = function(normalizedNum){
            if(this.type === 'continuous'){
              return normalizedNum * (this.max - this.min) + this.min;
            } else if(metaArray[i].type === 'discrete'){
              throw new Error("discrete not handled yet!");// TODO
            } else { throw new Error('unknown type from metaArray[i].type: ' + metaArray[i].type) }
          };
        }
        // return JSON.stringify(objArr, null, "\t");
        console.log('cvs to OBJECT complete!');
        return objArr;
      }
    }
  },
  createResultModel: function(workerNet ){

    var indexHash = {};
    indexHash.count = 0;
    var sampleSize = Math.round(this.get('metaHash').count * this.get('metaHash').sampleRate,1);
    while(indexHash.count < sampleSize){
      var randIndex = Math.floor(Math.random() * this.get('metaHash').count)
      if(!indexHash[randIndex]){
        indexHash[randIndex] = randIndex;
        indexHash.count += 1;
      }
    }

    var net = new brain.NeuralNetwork().fromJSON(workerNet);
    var metaHash = this.get('metaHash');
    var realDiffSum = 0;
    var normalizedDiffSum = 0;
    var text = "Date: " + Date() + "\n";
    for(var index in indexHash){
      if(index === 'count') {continue}
      var sampleInput = this.get('normalizedObject')[index].input;
      var output = net.run(sampleInput);
      var targetIndex = metaHash.target;
      var targetKey = metaHash.colNameArray[targetIndex].name;
      var expectedOutput = this.get('normalizedObject')[index].output[targetKey];

      //normalized to real
      var realExpectedOutput = metaHash.colNameArray[targetIndex].normalizedToReal(expectedOutput);
      var realGivenOutput = metaHash.colNameArray[targetIndex].normalizedToReal(output[targetKey]);
      var realSampleInput = {};

      for(var key in sampleInput){
        realSampleInput[key] = metaHash.colNameArray[metaHash.nameIndexHash[key]].normalizedToReal(sampleInput[key]);
      }
      //calculate diff
      var normalizedDiff = Math.abs(output[targetKey] - expectedOutput);
      var realDiff = Math.abs(realGivenOutput - realExpectedOutput);
      text = text + 'index: ' + index +
              ' input: ' +JSON.stringify(realSampleInput) +
              " output: " + JSON.stringify(realExpectedOutput) +
              " actual output: " + Math.round(realGivenOutput * 100) / 100 +
              " actual Diff: " + Math.round(realDiff * 100) / 100 +
              " normalized Diff: " + Math.round(normalizedDiff * 10000) / 100 + "%\n";
      normalizedDiffSum += normalizedDiff;
      realDiffSum += realDiff;

    }
    var averageNormalizedDiff = normalizedDiffSum / indexHash.count;
    var averageRealDiff = realDiffSum / indexHash.count;
    text = "average normalized difference : " + Math.round(averageNormalizedDiff * 10000) / 100 + "%\n" + text;
    text = "average real difference : " + Math.round(averageRealDiff * 100) / 100 + "\n" + text;
    this.get('results').add(new Result({
      viewId: "result-" + this.get('results').length,
      realOutput: text,
      metaHash: this.get('metaHash'),
      net: net}));
  }
});


var Results = Backbone.Collection.extend({
  url: '/data_sets',
  model: Result
});

var Result = Backbone.Model.extend({
  defaults:{
    input: {},
    normalizeInput: {},
    targetOutputRealValue: null,
    name: null
  },
  initialize: function(){
    //viewId
    //realOutput
    //metaHash
    //net
  },
  update: function(input){
    this.set('input', input);
    for(var key in input){
      var index = this.get('metaHash').nameIndexHash[key];
      this.get('normalizeInput')[key] = this.get('metaHash').colNameArray[index].realToNormalized(this.get('input')[key]);
    }
    var output = this.get('net').run(this.get('normalizeInput'));
    var targetKey = Object.keys(output)[0]
    this.set('targetOutputRealValue', this.get('metaHash').colNameArray[this.get('metaHash').target].normalizedToReal(output[targetKey]));
    this.trigger('change:targetOutputRealValue');
  },
  postResult: function(name){
    this.attributes.name = name;
    this.save();
  },
  toJSON : function(){
    tempModel = this.clone();
    delete tempModel.attributes.input;
    delete tempModel.attributes.normalizeInput;
    delete tempModel.attributes.targetOutputRealValue;
    tempModel.attributes.metaData = this.get('metaHash').colNameArray;
    delete tempModel.attributes.metaHash;
    delete tempModel.attributes.viewId;
    delete tempModel.attributes.realOutput;
    tempModel.attributes.trained_function = this.get('net');
    delete tempModel.attributes.net;
    return tempModel.attributes;
  }
});



